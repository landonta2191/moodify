{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Documents/Brainstation/Moodify/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Documents/Brainstation/Moodify/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mac/Documents/Brainstation/Moodify/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/Documents/Brainstation/Moodify/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/Documents/Brainstation/Moodify/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/Documents/Brainstation/Moodify/frontend/src/Player.js\";\nimport React, { Component } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nvar Player =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Player, _Component);\n\n  function Player() {\n    _classCallCheck(this, Player);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Player).apply(this, arguments));\n  }\n\n  _createClass(Player, [{\n    key: \"renderIframe\",\n    value: function renderIframe(spotifyData) {\n      if (spotifyData != null) {\n        var randomresult = getRandomInt(spotifyData.body.playlists.items.length - 1);\n        var id = spotifyData.body.playlists.items[randomresult].id;\n        var title = spotifyData.body.playlists.items[randomresult].name;\n        return React.createElement(\"div\", {\n          className: \"playpage\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, title), React.createElement(\"iframe\", {\n          allow: \"geolocation\",\n          src: \"https://open.spotify.com/embed/user/spotify/playlist/\".concat(id),\n          width: \"700\",\n          height: \"680\",\n          frameborder: \"1\",\n          allowtransparency: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"rendermicrosoft\",\n    value: function rendermicrosoft(microsoftData) {\n      if (microsoftData != null) {\n        console.log(microsoftData[0].faceAttributes.emotion.neutral);\n        var data = [{\n          name: 'anger',\n          value: microsoftData[0].faceAttributes.emotion.anger\n        }, {\n          name: 'contempt',\n          value: microsoftData[0].faceAttributes.emotion.contempt\n        }, {\n          name: 'disgust',\n          value: microsoftData[0].faceAttributes.emotion.disgust\n        }, {\n          name: 'fear',\n          value: microsoftData[0].faceAttributes.emotion.fear\n        }, {\n          name: 'hapiness',\n          value: microsoftData[0].faceAttributes.emotion.hapiness\n        }, {\n          name: 'neutral',\n          value: microsoftData[0].faceAttributes.emotion.neutral\n        }, {\n          name: 'sadness',\n          value: microsoftData[0].faceAttributes.emotion.sadness\n        }, {\n          name: 'surprise',\n          value: microsoftData[0].faceAttributes.emotion.surprise\n        }];\n        return React.createElement(\"div\", {\n          class: \"overplay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"mainimage\",\n          src: this.props.imgsrc,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var stats = this.props.data;\n      return React.createElement(\"div\", {\n        className: \"player\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, this.rendermicrosoft(stats.microsoft), this.renderIframe(stats.spotify));\n    }\n  }]);\n\n  return Player;\n}(Component);\n\nexport { Player as default };\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}","map":{"version":3,"sources":["/Users/mac/Documents/Brainstation/Moodify/frontend/src/Player.js"],"names":["React","Component","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Player","spotifyData","randomresult","getRandomInt","body","playlists","items","length","id","title","name","microsoftData","console","log","faceAttributes","emotion","neutral","data","value","anger","contempt","disgust","fear","hapiness","sadness","surprise","props","imgsrc","stats","rendermicrosoft","microsoft","renderIframe","spotify","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'\n\n\nexport default class Player extends Component {\n    renderIframe(spotifyData) {\n        if (spotifyData != null) {\n          let randomresult=  getRandomInt(spotifyData.body.playlists.items.length - 1)\n            let id = spotifyData.body.playlists.items[randomresult].id;\n            let title = spotifyData.body.playlists.items[randomresult].name;\n            return <div className=\"playpage\"> \n                <h1>{title}</h1>\n                <iframe allow=\"geolocation\" src={`https://open.spotify.com/embed/user/spotify/playlist/${id}`} width=\"700\" height=\"680\" frameborder=\"1\" allowtransparency=\"true\"></iframe> \n            </div>\n        }\n    }\n    rendermicrosoft(microsoftData) {\n        if (microsoftData != null) {\n          console.log(microsoftData[0].faceAttributes.emotion.neutral);\n            let data = [\n      { name: 'anger', value: microsoftData[0].faceAttributes.emotion.anger },\n      { name: 'contempt', value: microsoftData[0].faceAttributes.emotion.contempt},\n      { name: 'disgust', value: microsoftData[0].faceAttributes.emotion.disgust },\n      { name: 'fear', value: microsoftData[0].faceAttributes.emotion.fear},\n      { name: 'hapiness', value: microsoftData[0].faceAttributes.emotion.hapiness },\n      { name: 'neutral', value: microsoftData[0].faceAttributes.emotion.neutral },\n      { name: 'sadness', value: microsoftData[0].faceAttributes.emotion.sadness },\n      { name: 'surprise', value: microsoftData[0].faceAttributes.emotion.surprise },\n    ]\n            return <div class=\"overplay\">\n            <img className=\"mainimage\" src= {this.props.imgsrc}/>\n            {/* <BarChart width={730} height={250} \n            data={data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"pv\" fill=\"#8884d8\" />\n                <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\n            </BarChart> */}\n        </div>        \n        }\n    }\n  render() {\n    let stats= this.props.data;\n    return (\n      <div className=\"player\">\n        { this.rendermicrosoft(stats.microsoft) }\n        { this.renderIframe(stats.spotify) }\n      </div>\n    )\n  }\n}\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }"]},"metadata":{},"sourceType":"module"}