{"ast":null,"code":"import _classCallCheck from \"/Users/mac/Documents/Brainstation/landon-ta-brainflix/sprint2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Documents/Brainstation/landon-ta-brainflix/sprint2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mac/Documents/Brainstation/landon-ta-brainflix/sprint2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mac/Documents/Brainstation/landon-ta-brainflix/sprint2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mac/Documents/Brainstation/landon-ta-brainflix/sprint2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mac/Documents/Brainstation/landon-ta-brainflix/sprint2/src/pages/Main.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport MainBar from \"./MainBar\";\nimport VideoList from \"./VideoList\";\nvar API_KEY = '406d1d67-cd68-4d5f-be46-11656b50339d';\nvar baseUrl = 'https://project-2-api.herokuapp.com/';\nvar endpoint = \"videos\";\nvar queryString = \"?api_key=\" + API_KEY;\nvar endpoint1 = \"/comments\";\nvar queryString1 = \"/?api_key=\" + API_KEY;\n\nvar Main =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Main, _Component);\n\n  function Main() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Main)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      serverdata: [],\n      serverobject: {\n        comments: [] //fetch needs time to load the data. thats why its console log three times \n        //bc it rerenders 2 times everytime u set the state\n\n      } //GET REQUEST\n      // Call component did mount once because when call the \n      // function twice i will get only the most recent one\n\n    };\n\n    _this.submitcomment = function (e) {\n      e.preventDefault();\n      var body = {\n        name: \"landon\",\n        comment: e.target.comment.value\n      };\n      var init = {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: {\n          \"content-type\": \"application/json\"\n        }\n      };\n      fetch(baseUrl + endpoint + \"/\" + _this.props.match.params.id + endpoint1 + queryString1, init).then(function (resp) {\n        return resp.json();\n      }).then(function (data) {\n        debugger;\n\n        _this.setState({\n          serverobject: data\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Main, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //GET LIST VIDEO\n      fetch(baseUrl + endpoint + queryString).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this2.setState({\n          serverdata: data\n        });\n      }).catch(function (error) {}); //GET VIDEO\n\n      fetch(\"https://project-2-api.herokuapp.com/videos/1edc16bd-1bad-418b-bd40-c72ddd926672?api_key=406d1d67-cd68-4d5f-be46-11656b50339d\").then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        _this2.setState({\n          serverobject: data\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      // console.log(this.prevProps.match.params.id)\n      if (this.props.match.params.id !== prevProps.match.params.id) {\n        return fetch(baseUrl + endpoint + \"/\" + this.props.match.params.id + queryString).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          _this3.setState({\n            serverobject: data\n          });\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    } // POST COMMENT\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(MainBar, {\n        submitform: this.submitcomment,\n        singleVideo: this.state.serverobject,\n        videosDisplay: this.state.serverdata,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(VideoList, {\n        videosDisplay: this.state.serverdata,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Main;\n}(Component);\n\nexport default withRouter(Main);","map":{"version":3,"sources":["/Users/mac/Documents/Brainstation/landon-ta-brainflix/sprint2/src/pages/Main.js"],"names":["React","Component","withRouter","MainBar","VideoList","API_KEY","baseUrl","endpoint","queryString","endpoint1","queryString1","Main","state","serverdata","serverobject","comments","submitcomment","e","preventDefault","body","name","comment","target","value","init","method","JSON","stringify","headers","fetch","props","match","params","id","then","resp","json","data","setState","catch","error","console","log","response","prevProps","prevState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {withRouter} from \"react-router-dom\";\nimport MainBar from \"./MainBar\";\nimport VideoList from \"./VideoList\";\n\nconst API_KEY = '406d1d67-cd68-4d5f-be46-11656b50339d';\nconst baseUrl = 'https://project-2-api.herokuapp.com/';\nconst endpoint= \"videos\";\nconst queryString= \"?api_key=\" + API_KEY;\nconst endpoint1= \"/comments\";\nconst queryString1= \"/?api_key=\" + API_KEY;\nclass Main extends Component {\n    state = {\n        serverdata: [],\n        serverobject: {\n          comments:[]\n          //fetch needs time to load the data. thats why its console log three times \n          //bc it rerenders 2 times everytime u set the state\n        }\n    }\n    //GET REQUEST\n    // Call component did mount once because when call the \n    // function twice i will get only the most recent one\n    componentDidMount() {\n        //GET LIST VIDEO\n        fetch(baseUrl+ endpoint + queryString)\n        .then(response  => response.json())\n        .then (data => {\n        this.setState({\n        serverdata: data,\n        })\n      })\n        .catch( error => {\n        })\n        //GET VIDEO\n        fetch(\"https://project-2-api.herokuapp.com/videos/1edc16bd-1bad-418b-bd40-c72ddd926672?api_key=406d1d67-cd68-4d5f-be46-11656b50339d\")\n        .then(response  => response.json())\n        .then (data => {\n        this.setState({\n        serverobject: data,\n        })\n      })\n        .catch( error => {\n          console.log(error)\n        })\n    } \n    componentDidUpdate(prevProps,prevState) {\n      // console.log(this.prevProps.match.params.id)\n      if (this.props.match.params.id !== prevProps.match.params.id ) {\n        return (\n            fetch(baseUrl+ endpoint + \"/\" + this.props.match.params.id + queryString)\n            .then(response  => response.json())\n            .then (data => {\n            this.setState({\n            serverobject: data,\n            })\n          })\n            .catch( error => {\n              console.log(error)\n            })\n            ) \n          }\n        }\n      // POST COMMENT\n        submitcomment = (e) => {\n          e.preventDefault();\n           const body= {\n             name: \"landon\",\n             comment: e.target.comment.value,\n          }\n          const init = {\n            method: \"POST\",\n            body: JSON.stringify(body),\n            headers: {\n              \"content-type\": \"application/json\"\n          }\n          };\n\n          fetch(baseUrl+ endpoint + \"/\" + this.props.match.params.id+ endpoint1+ queryString1, init)\n          .then(resp => resp.json())\n          .then(data => {\n            debugger;\n            this.setState({\n              serverobject: data,\n            })\n         })\n         .catch( error => {\n          console.log(error)\n        })        \n      }\n\n\n        \n            \n    render() {\n      return (\n        <main>\n                <MainBar\n                submitform={this.submitcomment}\n                singleVideo={this.state.serverobject}\n                videosDisplay={this.state.serverdata}>\n                </MainBar>\n                <VideoList videosDisplay={this.state.serverdata} ></VideoList>\n        </main> \n      );\n    }\n  }\nexport default withRouter(Main);"]},"metadata":{},"sourceType":"module"}